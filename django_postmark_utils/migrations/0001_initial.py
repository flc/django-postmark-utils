# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-01-23 06:33
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Bounce',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_data', models.TextField(help_text='The raw bounce data, in JSON format', verbose_name='Raw data')),
                ('bounce_id', models.BigIntegerField(help_text='The ID of the bounce, as set by Postmark', unique=True, verbose_name='Bounce ID')),
                ('email', models.TextField(help_text='The email address the bounce is for', verbose_name='Email address')),
                ('date', models.DateTimeField(help_text='When the bounce happened', verbose_name='Date')),
                ('type_code', models.IntegerField(help_text='The type code of the bounce, as specified here: <https://postmarkapp.com/developer/api/bounce-api#bounce-types>', verbose_name='Type code')),
                ('is_inactive', models.BooleanField(help_text='If the bounce caused the email address to be deactivated', verbose_name='Is inactive')),
                ('can_activate', models.BooleanField(help_text='If the email address can be activated again', verbose_name='Can activate')),
                ('has_been_resent', models.BooleanField(default=False, help_text='If the message has been resent, in response to the bounce', verbose_name='Has been resent')),
            ],
            options={
                'ordering': ['-date'],
                'verbose_name_plural': 'bounces',
                'verbose_name': 'bounce',
            },
        ),
        migrations.CreateModel(
            name='Delivery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_data', models.TextField(help_text='The raw delivery data, in JSON format', verbose_name='Raw data')),
                ('email', models.TextField(help_text='The email address the delivery is to', verbose_name='Email address')),
                ('date', models.DateTimeField(help_text='When the delivery was made', verbose_name='Date')),
            ],
            options={
                'ordering': ['-date'],
                'verbose_name_plural': 'deliveries',
                'verbose_name': 'delivery',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(help_text='The content type of the message', max_length=255, verbose_name='Content type')),
                ('encoding', models.CharField(help_text='The encoding of the message', max_length=255, verbose_name='Encoding')),
                ('raw_header', models.TextField(help_text='The raw message header, in JSON format', verbose_name='Raw header')),
                ('message_id', models.CharField(help_text="The 'Message-ID' header field of the message", max_length=255, unique=True, verbose_name='Message ID')),
                ('date', models.DateTimeField(help_text="The 'Date' header field of the message", verbose_name='Date')),
                ('subject', models.CharField(blank=True, help_text="The 'Subject' header field of the message", max_length=255, verbose_name='Subject')),
                ('from_email', models.CharField(blank=True, help_text="The 'From' header field of the message", max_length=255, verbose_name='Sender email address')),
                ('to_emails', models.TextField(blank=True, help_text="The 'To' field of the message, with email addresses separated by commas", verbose_name='Recipient email addresses')),
                ('cc_emails', models.TextField(blank=True, help_text="The 'Cc' field of the message, with email addresses separated by commas", verbose_name="Cc'd recipient email addresses")),
                ('bcc_emails', models.TextField(blank=True, help_text="The 'Bcc' field of the message, with email addresses separated by commas", verbose_name="Bcc'd recipient email addresses")),
                ('body', models.TextField(blank=True, help_text='Plain text for text messages, and JSON (including base64-encoded attachments) for multipart messages', verbose_name='Body')),
                ('delivery_status', models.IntegerField(help_text='The delivery status of the message', verbose_name='Delivery status')),
                ('delivery_submission_date', models.DateTimeField(blank=True, help_text='When the message was submitted for delivery', null=True, verbose_name='Delivery-submission date')),
                ('delivery_message_id', models.CharField(blank=True, help_text="The 'Message-ID' header field of the message, as set by Postmark", max_length=255, unique=True, verbose_name='Delivery message ID')),
                ('delivery_error_code', models.IntegerField(blank=True, help_text='The delivery error code of the message, as specified here: <https://postmarkapp.com/developer/api/overview#error-codes>', null=True, verbose_name='Delivery error code')),
                ('delivery_message', models.CharField(blank=True, help_text='The response message from Postmark', max_length=255, verbose_name='Delivery message')),
            ],
            options={
                'ordering': ['-date'],
                'verbose_name_plural': 'messages',
                'verbose_name': 'message',
            },
        ),
        migrations.AddField(
            model_name='delivery',
            name='message',
            field=models.ForeignKey(help_text='The message the delivery is for', on_delete=django.db.models.deletion.CASCADE, related_name='deliveries', to='django_postmark_utils.Message', verbose_name='Message'),
        ),
        migrations.AddField(
            model_name='bounce',
            name='message',
            field=models.ForeignKey(help_text='The message the bounce is for', on_delete=django.db.models.deletion.CASCADE, related_name='bounces', to='django_postmark_utils.Message', verbose_name='Message'),
        ),
        migrations.AlterUniqueTogether(
            name='delivery',
            unique_together=set([('message', 'email')]),
        ),
    ]
